There are many ways to solve these problems. The answers below detail a straightforward way. If you have something different which nevertheless gives the correct answer, then that is okay.

Exercise 1
filter even [1..10]
filter odd [1..50]

Exercise 2
The key thing to remember is that the list we pass is the domain of discourse, so we have to construct that properly.

forAllMapFilter isPrime [5..10] evaluates to False
thereExistsMapFilter isPrime [5..10] evaluates to True
forAllMapFilter odd (filter isPrime [1..10]) evaluates to False

Exercise 3
[x | x <- [30..50], odd x] 
[x | x <- [40..80], odd x, isPrime x]
(Remember that the comma stands for "and", so you can just keep giving more and more restrictions for x separated by commas)

Exercise 4
thereExistsListComprehension (=='e') "So no-one told you life was gonna be this way." evaulates to True
forAllListComprehension even [10,20..190] evaluates to True 
(Note the ambiguity of natural language: the question says "less than" which can either be interpreted as "less than or equal to" or "strictly less than".

Exercise 5
map (subtract 1) (filter even [1..50]) 
(ADVANCED ANSWER: filter (not.even) [1..50]. If you don't understand this notation, wait a few weeks)

Exercise 6
map (subtract 1) [x | x <- [1..50], even x]
OR
[x | x <- [1..50], not (even x)]. Technically, this doesn't use map, so you wouldn't have fully answered the question.

Exercise 7
head (filter isPrime [100..200])
(You could also, if you didn't know where the prime may be, use the notation [100..] which is the infinite list starting at 100. Since you are looking for the head of the list, that it uses an infinite input doesn't cause any problems.)

head [x | x <- [100..], isPrime x]

Exercise 8
last (filter isPrime [1..200])
last [x | x <- [1..200], isPrime x]

Exercise 9
map (*2) [5..10]
OR
[2*x | x <- [5..10]]

forAllMapFilter even (map (*2) [5..10]) or something like that.

Exercise 10
map (^2) [1..20]
[x*x | x <- [1..20]]
